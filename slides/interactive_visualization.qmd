---
title: "Interactive Graphics"
format: 
  revealjs: 
    self-contained: true
editor: visual
---

```{r}
#| include: FALSE
knitr::opts_chunk$set(echo = TRUE)
```

## Packages loaded for this talk

```{r packages}
#| message: FALSE
#| echo: TRUE
library(plotly)
library(leaflet)
library(ggiraph)
library(highcharter)
library(rCharts) # ramnathv/rCharts
library(ggplot2)
library(tibble)
library(dplyr)
library(tidyr)
```

## Why Interactive Graphics?

::: incremental
-   Because it's fun

-   Because it's cool

-   Because it allows a new dimension of conveying results

-   Because a collaborator asked
:::

## (Some) Packages in R

::: incremental
-   plotly - especially `ggplotly()`

-   ggiraph

-   highcharter

-   Won't cover

    -   rCharts (ramnathv/rCharts)

    -   rbokeh

    -   leaflet
:::

## How to build

Many cases you know how to build a `ggplot2` object

May want to "interactive" it up

Many times you will hit roadblocks or limitations

## Scatterplot

We're going to be using the toyest example in R, `mtcars` ! But we want the car names

```{r cars}
#| echo: TRUE
cars = mtcars %>% 
    rownames_to_column(var = "car") %>% 
    separate(car, into = c("make", "blah"), sep = " ", remove = FALSE, extra = "merge") %>% 
    select(make, car, everything()) %>% 
    select(-blah) %>% 
    as_tibble()
cars
```

## Scatterplot

Weight (in tons) vs miles per gallon (MPG)

```{r make_p}
(ggplot(cars, aes(wt, mpg)) +
    geom_point())
```

## Scatterplot (a little better)

```{r make_p2}
(p <- ggplot(cars, aes(wt, mpg)) +
    geom_point() +
    xlab("Weight (in tons)") + 
    ylab("Miles Per Gallon (MPG)") + 
    theme_bw(base_size = 22))
```

## Interactive Points (plotly)

`plotly::ggplotly` turns gg objects to `plotly` objects!

```{r}
ggplotly(p)
```

## Interactive Points (plotly)

`plotly::ggplotly` turns your objects into `plotly` objects!

```{r}
ggplotly(p + geom_line())
```

## Customize Hover Over Things

```{r button_customizer}
plotly_button_config = function(fig,
                                buttons = c("toImage",
                                            "resetViews"),
                                displaylogo = FALSE,
                                displayModeBar = TRUE) {
  buttons = as.list(buttons)
  buttons = list(buttons)
  fig %>%
    plotly::config(modeBarButtons = buttons,
                   displaylogo = displaylogo,
                   displayModeBar = displayModeBar)
}
```

## Interactive Points (plotly)

```{r customized_buttons}
plotly_button_config(ggplotly(p))
```

## Interactive Points (ggiraph)

In `ggiraph` (giraffe) you cannot transform a `ggplot` object but you have the same syntax, but put an `_interactive` on it.

[![](../imgs/interactive_visualization/put_a_bird_on_it.gif){fig-alt="Put a \"Bird on It\" Meme from Portlandia TV show" fig-align="center" width="50%"}](https://www.youtube.com/watch?v=GNpIOlDhigw)

## Interactive Points (ggiraph)

```{r make_p_interactive}
(g <- ggplot(cars, aes(wt, mpg)) +
    geom_point_interactive() +
    xlab("Weight (in tons)") + 
    ylab("Miles Per Gallon (MPG)") + 
    theme_bw(base_size = 22))
```

## Need to `girafe` it?

```{r make_p_show}
girafe(ggobj = g)
```

## ggiraph: No default tooltips

```{r make_p_interactive_work}
g <- ggplot(cars, aes(wt, mpg, tooltip = car)) +
    geom_point_interactive() +
    xlab("Weight (in tons)") + 
    ylab("Miles Per Gallon (MPG)") + 
    theme_bw(base_size = 22)
girafe(ggobj = g)
```

## More Interaction!

```{r}
g = ggplot(cars, aes(x = factor(cyl), y = hp)) + 
  geom_boxplot(outlier.shape = NA)
ggplotly(g)
```

## Interaction works with colour

```{r gcol}
gcol = ggplot(cars, aes(x = hp, y = mpg, colour = factor(cyl))) + 
  geom_point() +
  guides(colour = "none") +
  geom_smooth(se = FALSE) 
ggplotly(gcol)
```

## Interaction (still) works with facets

```{r gcol_facet}
ggplotly(gcol + facet_wrap(~ factor(cyl)))
```

## Highcharter: Click away groups

```{r highscat}
cars %>% 
  hchart(
    "scatter",
    hcaes(x = hp, y = mpg, group = factor(cyl)))
```

## Making a quick frequency data set

```{r summary_cars}
car_count = cars %>% 
  mutate(producer = ifelse(as.logical(am), "America", "Not America"),
         cylinders = factor(cyl)) %>%   
    group_by(producer, cylinders) %>% 
  summarise(
    hp = round(mean(hp), 2),
    n = dplyr::n()) %>% 
  group_by(producer) %>% 
  mutate(pct = n/sum(n)) %>% 
  ungroup()
```

## Highcharter

```{r highbar}
car_count %>% 
  hchart(
    "bar",
    hcaes(y = hp, x = producer, group = cylinders)
  )
```

## Highcharter Tile Map:

```{r}
#| echo: FALSE
data(vaccines)

fntltp <- JS("function(){
  return this.point.x + ' ' +  this.series.yAxis.categories[this.point.y] + ': ' +
  Highcharts.numberFormat(this.point.value, 2);
}")

res = hchart(
  vaccines, 
  "heatmap", 
  hcaes(
    x = year,
    y = state, 
    value = count, 
    tooltip = state,
    )
  ) |>
  hc_colorAxis(
    stops = color_stops(10, viridisLite::inferno(10, direction = -1)),
    type = "logarithmic"
  ) |>
  hc_yAxis(
    title = list(text = ""),
    reversed = TRUE, 
    offset = -20,
    tickLength = 0,
    gridLineWidth = 0, 
    minorGridLineWidth = 0,
    labels = list(style = list(fontSize = "9px"))
  ) |>
  hc_tooltip(
    formatter = fntltp
    ) |>
  hc_title(
    text = "Infectious Diseases and Vaccines"
    ) |>
  hc_subtitle(
    text = "Number of cases per 100,000 people"
  ) |> 
  hc_legend(
    layout = "horizontal",
    verticalAlign = "top",
    align = "left",
    valueDecimals = 0
  ) |>
  hc_size(height = 900)
res
```

## Highcharter may come at a (literal) price

Highcharts offers both a commercial license as well as a free non-commercial license

[![](imgs/interactive_visualization/highcharts_pricing.png){fig-alt="Pricing Chart for Highcharts" fig-align="center"}](https://shop.highcharts.com/)

## rCharts: Different Syntax

```{r eval = FALSE, results = 'asis', comment = NA, cache = FALSE}
n1 <- car_count %>% 
  nPlot(n ~ producer, group = "cylinders", data = ., type = "multiBarChart")
n1$show('inline', include_assets = TRUE, cdn = TRUE)
```

## rCharts: Scale to 100%

```{r eval = FALSE, results = 'asis', comment = NA, cache = FALSE}
n2 <- car_count %>% 
  nPlot(pct ~ producer, group = "cylinders", data = ., type = "multiBarChart")
n2$show('inline', include_assets = TRUE, cdn = TRUE)
```

## Making Connected Graphs are Hard

-   Possible to do within the same framework (e.g. Plotly)

-   Possible do to that with JavaScript only

-   Can use Shiny (see <https://mastering-shiny.org/action-graphics.html>)

-   Can also use crosstalk (<https://rstudio.github.io/crosstalk/>)

    -   Must be a subset of certain htmlwidgets

    -   DT - data tables
