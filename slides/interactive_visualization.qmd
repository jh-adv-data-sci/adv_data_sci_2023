---
title: "Interactive Graphics"
format: 
  revealjs: 
    self-contained: true
editor: visual
---

```{r}
#| include: FALSE
knitr::opts_chunk$set(echo = TRUE)
```

## Packages loaded for this talk

```{r packages}
#| message: FALSE
#| echo: TRUE
library(ggplot2)
library(plotly)
library(ggiraph)
library(highcharter)
library(rCharts) # ramnathv/rCharts
library(leaflet)
library(tibble)
library(dplyr)
library(tidyr)
library(crosstalk)
library(DT)
```

## Why Interactive Graphics?

::: incremental
-   Because it's fun

-   Because it's cool

-   Because it allows a new dimension of conveying results

-   Because a collaborator asked
:::

## Packages in R Covered (at least in part)

::: incremental
-   plotly - framework for interactive plotting (covered a lot)

-   ggiraph - R package that creates interactive ggplot graphs using D3 and other frameworks

-   highcharter - wraps JS framework [Highcharts](https://www.highcharts.com/)

-   rCharts - interactive javascript visualizations from R using a familiar lattice style plotting interface

    -   Interfaces polychart, Morris, NVD3, xCharts, Highcharts, Leaflet, Rickshaw
    -   https://github.com/ramnathv/rCharts
:::

## Packages not covered

-   rbokeh - another framework for interactive plotting

-   leaflet - great for interactive maps

-   rayshader - interactive 3D maps/plots/ggplot2s

-   d3heatmap - interactive heatmamps

-   threejs - 3D scatterplots

## How to build an interactive graphic

Many cases you know how to build a `ggplot2` object

May want to "interactive" it up

Many times you will hit roadblocks or limitations

## Toy Cars

We're going to be using the toyest data, `mtcars` ! But we want the car names

```{r cars}
#| echo: TRUE
(cars <- mtcars %>% 
   rownames_to_column(var = "car") %>% 
   as_tibble() %>% 
   separate(car, into = c("make", "blah"), sep = " ", remove = FALSE, extra = "merge") %>% 
   select(make, car, everything()) %>% 
   select(-blah))
```

## DT: Data Tables
https://datatables.net/reference/option/)

```{r cars_dt}
#| echo: TRUE
#| code-fold: true
#| code-summary: "Show the code"
cars %>% 
  mutate(cyl = factor(cyl),
         am = factor(am),
         vs = factor(vs)
  ) %>% 
         DT::datatable(extensions = "Buttons", filter = "top",
              options = list(    
                dom = "Bltip",
                buttons = list(
                  list(extend = "collection", buttons = c("csv", "excel"), text = "Download"))))
```

## Scatterplot

Weight (in tons) vs miles per gallon (MPG)

```{r make_p}
(ggplot(cars, aes(wt, mpg)) +
    geom_point())
```

## Scatterplot (a little better)

```{r make_p2}
(p <- ggplot(cars, aes(wt, mpg)) +
    geom_point() +
    xlab("Weight (in tons)") + 
    ylab("Miles Per Gallon (MPG)") + 
    theme_bw(base_size = 22))
```

## Interactive Points (plotly)

`plotly::ggplotly` turns gg objects to `plotly` objects!

```{r}
ggplotly(p)
```

## Interactive Points (plotly)

Does a lot of the `geom`s

```{r}
ggplotly(p + geom_line())
```

## Customize Hover Over Things

```{r button_customizer}
plotly_button_config = function(fig,
                                buttons = c("toImage",
                                            "resetViews"),
                                displaylogo = FALSE,
                                displayModeBar = TRUE) {
  buttons = as.list(buttons)
  buttons = list(buttons)
  fig %>%
    plotly::config(modeBarButtons = buttons,
                   displaylogo = displaylogo,
                   displayModeBar = displayModeBar)
}
```

## Interactive Points (plotly)

```{r customized_buttons}
plotly_button_config(ggplotly(p))
```

## More Interaction!

```{r}
g = ggplot(cars, aes(x = factor(cyl), y = hp)) + 
  geom_boxplot(outlier.shape = NA)
ggplotly(g)
```

## Interaction works with colour

```{r gcol}
gcol = ggplot(cars, aes(x = hp, y = mpg, colour = factor(cyl))) + 
  geom_point() +
  guides(colour = "none") +
  geom_smooth(se = FALSE) 
ggplotly(gcol)
```

## Interaction (still) works with facets

```{r gcol_facet}
ggplotly(gcol + facet_wrap(~ factor(cyl)))
```

## Use Plotly interface directly (faster), uses formula syntax!

<https://plotly.com/r/plotly-fundamentals/> is a great resource for starting (maybe 2 hours?)

[![](../imgs/interactive_visualization/plotly_fundamentals.png){fig-alt="Screenshot of Plotly webpage for fundamentals of plotting." fig-align="center" width="50%"}](https://plotly.com/r/plotly-fundamentals/)

## Use Plotly interface directly

Uses pipes not `+`. Main function is `plot_ly` (guesses type). Treats variable types as continuous if numbers.

```{r plotly_fig1}
#| message: TRUE
cars %>% 
  plot_ly(x = ~ hp, y = ~mpg, color = ~ cyl)
```

## Put the type in though

And can do factor on the fly like normal formulas.

```{r plotly_scatter}
#| message: TRUE
cars %>% 
  plot_ly(x = ~ hp, y = ~mpg, color = ~ factor(cyl), type = "scatter", mode = "markers")
```

## Multiple types are with `+` (but in quotes)

```{r plotly_scat_line}
#| message: TRUE
cars %>% 
  plot_ly(x = ~ hp, y = ~mpg, color = ~ factor(cyl), type = "scatter", mode = "markers+lines")
```

## It plots in order it sees

```{r plotly_scat_line2}
#| message: TRUE
cars %>% 
  arrange(hp, mpg) %>% 
  plot_ly(x = ~ hp, y = ~mpg, color = ~ factor(cyl), type = "scatter", mode = "markers+lines")
```

## Plotly can do very basic things.

```{r easy_plotly}
plot_ly(x = c(1, 2, 3), y = c(1, 3, 2), type = 'bar') %>% 
  layout(title = 'A Plotly Figure',
         plot_bgcolor='#e5ecf6')
```

## Lot of add\_\* functions

Note how `add_lines` differs from `markers+lines`

```{r}
#| message: TRUE
cars %>% 
  plot_ly(x = ~ hp, y = ~mpg, color = ~ factor(cyl), type = "scatter", mode = "markers") %>% 
  add_lines()
```

## Lot of add\_\* functions

```{r}
#| message: TRUE
  cars %>% 
    plot_ly(x = ~ cyl, y = ~mpg, type = "box") %>% 
  add_markers()
```

## Jitter

```{r}
(jplot <- cars %>% 
  plot_ly(x = ~ cyl, y = ~mpg, type = "box") %>% 
  add_boxplot(jitter = 0.3, boxpoints = "all"))
```

## How do we know that parameter?

Lots of different options. Has pros/cons vs. ggplot2.

```{r}
#| eval: FALSE
?plotly::schema
# traces -> boxplot -> attributes -> boxpoints 
```

## Plotly can do ... a lot

```{r}
# volcano is a numeric matrix that is in base R
(vplot <- plot_ly(z = ~volcano) %>% add_surface())
```

## Plotly can do ... a lot

```{r}
(miniplot <- plotly::plot_ly() %>% 
  add_trace(x = c(1, 2, 3), y = c(4, 3, 2), mode='lines') %>% 
  add_trace(x = c(20, 30, 40), y = c(30, 40, 50), 
            xaxis='x2', yaxis='y2', mode='lines') %>%  # new axis
  layout(xaxis2 = list(domain = c(0.6, 0.95), anchor='y2'), # anchor based on axis
         yaxis2 = list(domain = c(0.6, 0.95), anchor='x2')))
```

## Can do subplots

```{r}
subplot(jplot, jplot, nrows = 2, margin = 0.05)
```

## Some things don't subplot nicely

```{r}
subplot(jplot, vplot, nrows = 2,  margin = 0.05)
```

## Some things don't subplot nicely

```{r}
subplot(jplot, miniplot, nrows = 2,  margin = 0.05)
```

# ggiraph - (giraffe)

## Interactive Points (ggiraph)

In `ggiraph` you cannot transform a `ggplot` object but you have the same syntax, but put an `_interactive` on it.

[![](../imgs/interactive_visualization/put_a_bird_on_it.gif){fig-alt="Put a \"Bird on It\" Meme from Portlandia TV show" fig-align="center" width="50%"}](https://www.youtube.com/watch?v=GNpIOlDhigw)

## Interactive Points (ggiraph)

```{r make_p_interactive}
(g <- ggplot(cars, aes(wt, mpg)) +
    geom_point_interactive() +
    xlab("Weight (in tons)") + 
    ylab("Miles Per Gallon (MPG)") + 
    theme_bw(base_size = 22))
```

## Need to `girafe` it?

```{r make_p_show}
girafe(ggobj = g)
```

## ggiraph: No default tooltips

```{r make_p_interactive_work}
g <- ggplot(cars, aes(wt, mpg)) +
    geom_point_interactive(aes(tooltip = car)) +
    geom_line_interactive() +
    xlab("Weight (in tons)") + 
    ylab("Miles Per Gallon (MPG)") + 
    theme_bw(base_size = 22)
girafe(ggobj = g)
```

# Highcharter - wrapper for Highcharts JS Library

## Highcharter: Click away groups

```{r highscat}
cars %>% 
  hchart(
    "scatter",
    hcaes(x = hp, y = mpg, group = factor(cyl)))
```

## Making a quick frequency data set

```{r summary_cars}
car_count = cars %>% 
  mutate(producer = ifelse(as.logical(am), "America", "Not America"),
         cylinders = factor(cyl)) %>%   
    group_by(producer, cylinders) %>% 
  summarise(
    hp = round(mean(hp), 2),
    n = dplyr::n()) %>% 
  group_by(producer) %>% 
  mutate(pct = n/sum(n)) %>% 
  ungroup()
```

## Highcharter

```{r highbar}
car_count %>% 
  hchart(
    "bar",
    hcaes(y = hp, x = producer, group = cylinders)
  )
```

## Highcharter Tile Map

```{r}
#| echo: FALSE
data(vaccines)

fntltp <- JS("function(){
  return this.point.x + ' ' +  this.series.yAxis.categories[this.point.y] + ': ' +
  Highcharts.numberFormat(this.point.value, 2);
}")

res = hchart(
  vaccines, 
  "heatmap", 
  hcaes(
    x = year,
    y = state, 
    value = count, 
    tooltip = state,
    )
  ) |>
  hc_colorAxis(
    stops = color_stops(10, viridisLite::inferno(10, direction = -1)),
    type = "logarithmic"
  ) |>
  hc_yAxis(
    title = list(text = ""),
    reversed = TRUE, 
    offset = -20,
    tickLength = 0,
    gridLineWidth = 0, 
    minorGridLineWidth = 0,
    labels = list(style = list(fontSize = "9px"))
  ) |>
  hc_tooltip(
    formatter = fntltp
    ) |>
  hc_title(
    text = "Infectious Diseases and Vaccines"
    ) |>
  hc_subtitle(
    text = "Number of cases per 100,000 people"
  ) |> 
  hc_legend(
    layout = "horizontal",
    verticalAlign = "top",
    align = "left",
    valueDecimals = 0
  ) |>
  hc_size(height = 900)
res
```

## Highcharter may come at a (literal) price

Highcharts offers both a commercial license as well as a free non-commercial license

[![](imgs/interactive_visualization/highcharts_pricing.png){fig-alt="Pricing Chart for Highcharts" fig-align="center"}](https://shop.highcharts.com/)

# rCharts: a JS widget interface

## rCharts: Different Syntax

```{r results = 'asis', comment = NA, cache = FALSE}
n1 <- car_count %>% 
  nPlot(n ~ producer, group = "cylinders", data = ., type = "multiBarChart")
n1$show('inline', include_assets = TRUE, cdn = TRUE)
```

## rCharts: Scale to 100%

```{r results = 'asis', comment = NA, cache = FALSE}
n2 <- car_count %>% 
  nPlot(pct ~ producer, group = "cylinders", data = ., type = "multiBarChart")
n2$show('inline', include_assets = TRUE, cdn = TRUE)
```

```{css echo=FALSE}
.big-code{
  font-size: 200%  
}
```

## Remember Basic Figure Tenets

-   Show what you're trying to show, stop making it too much

-   Hone in on the insights you found (don't be too subtle)

-   You should be able to get the gist before you read anything

-   Make [Labels Larger]{.big-code}

-   Label Panels/Facets/Subplots (A, B, C, D)

-   Keep colors consistent if connected and distinct if not

-   Watch out for yellow with white text or on white background (projector)

-   Caption your figures

## A Summary

-   Interactive graphics are sometimes powerful, but limited to HTML

-   Many different frameworks, customization ease is highly variable

-   Remember basic plotting tenets: show what you want to show, hone in on the insights (don't be sutle

-   `plotly` good general framework, has a `ggplot2` wrapper, but highcharts has some built in niceties.

# Plotly can also work with `crosstalk`

## Crosstalk: Shared Data is the Key

```{r}
sd <- SharedData$new(quakes[sample(nrow(quakes), 100),])
# Use SharedData like a dataframe with Crosstalk-enabled widgets
bscols(
  leaflet(sd) %>% addTiles() %>% addMarkers(),
  datatable(sd, extensions="Scroller", style="bootstrap", class="compact", width="100%",
    options=list(deferRender=TRUE, scrollY=300, scroller=TRUE))
)
```

## Making Connected Graphs are Hard

-   Much easier to do within the same framework (e.g. Plotly)

-   Possible do it, but need to know JavaScript

-   Can use Shiny (see <https://mastering-shiny.org/action-graphics.html>)

-   Can use crosstalk (<https://rstudio.github.io/crosstalk/>)

    -   Must be a subset of certain htmlwidgets

        -   DT - data tables

        -   Leaflet

        -   Plotly

## Conclusion

> **The purpose of visualization is insight, not pictures.** ―Ben Shneiderman

> **Above all else, show the data.** ―Edward Tufte
